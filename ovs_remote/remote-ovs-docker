#!/bin/bash

add_port () {
	 BRIDGE="$1"
	 INTERFACE="$2"
	 CONTAINER="$3"
	 IP=$4
	 OVS_PORT=$5
	 DOCKER_PORT=$6
	 USERNAME=$7

	if [  -z "$BRIDGE" ] || [ -z "$INTERFACE" ] || [ -z "$CONTAINER" ]; then
	   echo >&2 "Not enough arguments"
	   exit 1
	fi

	#Check if a port is already attached for a given container & interface
	PORT=`sudo ovs-vsctl --db=tcp:$IP:$OVS_PORT --data=bare --no-heading --columns=name find interface external_ids:container_id="$CONTAINER" external_ids:container_iface="$INTERFACE"`

	if [ -n "$PORT" ]; then
	    echo >&2 "Port already attached"
            exit 1
	fi

	if sudo ovs-vsctl --db=tcp:$IP:$OVS_PORT br-exists "$BRIDGE" || sudo ovs-vsctl --db=tcp:$IP:$OVS_PORT add-br "$BRIDGE"; then :; else
	    echo >&2 "Failed to create $BRIDGE"
            exit 1
	fi

	if PID=`curl -s -X GET -H "Content-Type: application/json" http://$IP:$DOCKER_PORT/v1.37/containers/$CONTAINER/json | jq -r '.State.Pid'`; then :; else
	    echo >&2 "Failed to get the PID of the container"
            exit 1
	fi

	# create netns link
	OUT=`ssh $USERNAME@$IP 'sudo mkdir -p /var/run/netns; test -e /var/run/netns/'"$PID"'; echo $'`
	OUT=${OUT%$'\r'}

	if [ $OUT -eq 1 ]; then
	    ssh $USERNAME@$IP sudo ln -s /proc/"$PID"/ns/net /var/run/netns/"$PID"
	fi

	# Create a veth pair
	ID=`uuidgen | sed 's/-//g'`
	PORTNAME="${ID:0:13}"

	ssh $USERNAME@$IP sudo ip link add "${PORTNAME}_l" type veth peer name "${PORTNAME}_c"

	# Add one end of veth to OVS bridge
	if sudo ovs-vsctl --db=tcp:$IP:$OVS_PORT --may-exist add-port "$BRIDGE" "${PORTNAME}_l" -- set \
	interface "${PORTNAME}_l" external_ids:container_id="$CONTAINER" \
	external_ids:container_iface="$INTERFACE"; then :; else
	    echo "Failed to add "${PORTNAME}_l" port to bridge $BRIDGE"
	    ssh $USERNAME@$IP sudo ip link delete "${PORTNAME}_l"
	    exit 1
	fi

	ssh $USERNAME@$IP 'sudo ip link set '"${PORTNAME}_l"' up; sudo ip link set '"${PORTNAME}_c"' netns '"$PID"'; sudo ip netns exec '"$PID"' ip link set dev '"${PORTNAME}_c"' name '"$INTERFACE"'; sudo ip netns exec '"$PID"' ip link set '"$INTERFACE"' up'

	if [ $OUT -eq 1 ]; then
	    ssh $USERNAME@$IP 'trap `sudo rm -f /var/run/netns/'"$PID"'` 0'
	fi
	    
}

del_port () {
	 BRIDGE=$1
	 INTERFACE=$2
	 CONTAINER=$3
	 IP=$4
	 OVS_PORT=$5
	 USERNAME=$6

	 PORT=`sudo ovs-vsctl --db=tcp:$IP:$OVS_PORT --data=bare --no-heading --columns=name find interface external_ids:container_id="$CONTAINER" external_ids:container_iface="$INTERFACE"`

	 if [ -z "$PORT" ]; then
	     exit 1
	 fi

	 sudo ovs-vsctl --db=tcp:$IP:$OVS_PORT --if-exists del-port "$PORT"

	 ssh $USERNAME@$IP sudo ip link delete "$PORT"
}

del_ports () {
	  BRIDGE=$1
	  CONTAINER=$2
	  IP=$3
	  OVS_PORT=$4
	  USERNAME=$5

	  PORTS=`sudo ovs-vsctl --db=tcp:$IP:$OVS_PORT --data=bare --no-heading --columns=name find interface external_ids:container_id="$CONTAINER"`

	  if [ -z "$PORTS" ]; then
	      exit 1
	  fi

	  for PORT in $PORTS; do
	      sudo ovs-vsctl --db=tcp:$IP:$OVS_PORT --if-exists del-port "$PORT"
	          ssh $USERNAME@$IP sudo ip link delete "$PORT"
	  done
}

search_path () {
    save_IFS=$IFS
    IFS=:
    for dir in $PATH; do
        IFS=$save_IFS
        if test -x "$dir/$1"; then
            return 0
        fi
    done
    IFS=$save_IFS
    echo >&2 "$0: $1 not found in \$PATH, please install and try again"
    exit 1
}

UTIL=$(basename $0)
search_path ovs-vsctl
search_path uuidgen

if (ip netns) > /dev/null 2>&1; then :; else
   echo >&2 "$UTIL: ip utility not found (or it does not support netns), cannot proceed"
   exit 1
fi

if [ $# -eq 0 ]; then
   exit 0
fi

case $1 in
     "add-port")
	shift
	add_port "$@"
	exit 0
	;;
     "del-port")
	shift
	del_port "$@"
	exit 0
	;;
     "del-ports")
	shift
	del_ports "$@"
	exit 0
	;;
     *)
	echo >&2 "$UTIL: unknown command"
	exit 1
	;;
esac
